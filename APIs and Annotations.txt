1.Program to display current date and time in java.
-->
	import java.time.*;
	public class DateTime
	{
		public sattis void main(String[] args)
		{
			LocalDate date = LocalDate.now();
			System.out.println(date);
			LocalTime time=localTime.now();
			System.out.println(time);
		}
	}
	
Output:
	javac DateTime.java
	java DateTime
	2023-03-30
	10:33:11.025394800
	
2.Write a program to convert a date to a string in the format "mm/dd/yyyy".
-->
	import java.time.LocalDate;
	import java.time.format.DateTimeFormatter;
	
	public class DateToString
	{
		public static void main(String[] args)
		{
			LocalDate date = LocalDate.of(2023,4,4);
			
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("mm/dd/yyyy");
			String formattedDate = date.format(formatter);
			
			System.out.println("Formatted Date: " + formattedDate);
		}
	}
	
Output:
	javac DatetoString.java
	java DatetoString
	Formatted Date: 04/04/2023

3.What is the difference between collection and stream? Explain with an Example
-->
	Collection:
		Storage: Stores data in memory.
		Mutability: Can add, remove, or update elements.
		Type: Eager (evaluates elements immediately).
		Iteration: Explicit, using loops or iterators.
		Operations: Basic operations like adding, removing, and checking size.	
		Examples: List, Set, Map.
		Code:
			import java.io.*;
			import java.util.*;
			class Main 
			{
				public static void main(String[] args)
				{
				List<String> CompanyList = new ArrayList<>();
				CompanyList.add("Google");
				CompanyList.add("Apple");
				CompanyList.add("Microsoft");
				Comparator<String> com = (String o1, String o2) -> o1.compareTo(o2);
				Collections.sort(CompanyList, com);
				for (String name : CompanyList) 
					{
						System.out.println(name);
					}
				}
			}	
		Output:
			Apple
			Google
			Microsoft		
	
	Stream:
		Storage: Does not store data; represents a sequence of elements from a source.
		Mutability: Immutable; elements cannot be added or removed directly.
		Type: Lazy (evaluates elements only when needed).
		Iteration: Implicit, using internal iteration with functional operations.
		Operations: Advanced operations like filtering, mapping, and reducing.
		Examples: Stream<T>, IntStream, DoubleStream.	
		Code:
			import java.io.*;
			import java.util.*;
			class Demo 
			{
				public static void main(String[] args)
				{
					List<String> CompanyList = new ArrayList<>();
					CompanyList.add("Google");
					CompanyList.add("Apple");
					CompanyList.add("Microsoft");
					CompanyList.stream().sorted().forEach(System.out::println);
				}
			}
		
		Output:
			   Apple
			   Google
			   Microsoft
			   
4.What is enums in java? explain with an example
-->
	Ans: We can use enum to define a group of named constants.
	Enums are used to represent a collection of related constants that have a common purpose. Each constant in an
	enum is an instance of the enum type, and they are typically defined as public static final fields.
	Here's an example of how to define an enum in Java:
	
	class EnumDemo
	{
	public enum DayOfWeek 
	{
	MONDAY,
	TUESDAY,
	WEDNESDAY,
	THURSDAY,
	FRIDAY,
	SATURDAY,
	SUNDAY
	}
	public static void main(String args[]){
	for(DayOfWeek d:DayOfWeek.values())
	System.out.println(d);	
	}
	}
	
	Here we define an enum called "DayOfWeek" that represents the days of the week. The enum has seven
	constants, each representing a day of the week. The constants are defined in all uppercase letters by convention.

5.What are in built annotations in java
-->
	built-in annotations in java
	@override
	@Deprecated
	@SuppressWarnings
	@FunctionalInterface
	@Retention
	@Target
	@Documented
	@Inherited
	These built-in annotations in Java are used to provide additional information to the Java compiler and other
	tools. They help improve code readability, maintainability, and safety by enforcing specific rules and behaviours
	in Java code.

